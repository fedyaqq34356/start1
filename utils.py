import asyncio
import logging
from datetime import datetime

from config import ADMIN_IDS, RESTART_ON_ERROR
from keyboards import get_admin_card_approval_keyboard, get_main_menu
from main import bot
import os
import sys

logger = logging.getLogger(__name__)

async def send_order_to_admin(order_id: str, order: dict, payment_method: str):
    order_text = f"""üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (@{order['user_id']})
üì¶ –¢–∏–ø: {'–ó–≤–µ–∑–¥—ã' if order['type'] == 'stars' else 'Telegram Premium'}
{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) + ' –º–µ—Å—è—Ü–µ–≤'}
üí∞ –°—É–º–º–∞: {order['price']}‚Ç¥
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}
üïí –í—Ä–µ–º—è: {order['created_at']}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, order_text, reply_markup=get_admin_card_approval_keyboard(order_id))
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def send_card_order_to_admin(order_id: str, order: dict):
    try:
        order_text = f"""üí≥ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (ID: {order['user_id']})
üìù Username –∫–ª–∏–µ–Ω—Ç–∞: {order.get('customer_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üì¶ –¢–∏–ø: {'–ó–≤–µ–∑–¥—ã' if order['type'] == 'stars' else 'Telegram Premium'}
{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) + ' –º–µ—Å—è—Ü–µ–≤'}
üí∞ –°—É–º–º–∞: {order['price']}‚Ç¥
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–æ–π
üïí –í—Ä–µ–º—è: {order['created_at']}

–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:"""
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_photo(
                    admin_id,
                    photo=order['payment_screenshot'],
                    caption=order_text,
                    reply_markup=get_admin_card_approval_keyboard(order_id)
                )
                logger.info(f"–ó–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                await bot.send_message(
                    order['user_id'],
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                    reply_markup=get_main_menu()
                )
                return
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ send_card_order_to_admin –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}", exc_info=True)
        await bot.send_message(
            order['user_id'],
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
            reply_markup=get_main_menu()
        )

async def check_split_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Split API"""
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"Authorization": f"Bearer {config.SPLIT_API_TOKEN}"}
            async with session.get(f"{config.SPLIT_API_URL}/health", headers=headers, timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"Split API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

async def subscription_required(user_id: int) -> bool:
    if not await start_handlers.check_subscription(user_id):  # –ò–º–ø–æ—Ä—Ç –∏–∑ start_handlers
        subscription_text = """‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª!

üì∫ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É" """
        
        await bot.send_message(
            user_id,
            subscription_text,
            reply_markup=keyboards.get_subscription_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
        return False
    return True

async def safe_restart():
    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(3)
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É...")
    except:
        pass
    
    os.execl(sys.executable, sys.executable, *sys.argv)

async def handle_critical_error(exc_type, exc_value, exc_traceback):
    error_message = f"""üö® –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:

Type: {exc_type.__name__}
Message: {str(exc_value)}
Traceback: {traceback.format_exc()}

Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, error_message)
    except:
        pass
    
    logger.critical(error_message)
    
    if RESTART_ON_ERROR:
        await safe_restart()

async def on_startup(dp):
    database.init_db()  # –ò–º–ø–æ—Ä—Ç –∏–∑ database
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫: {e}")

async def on_shutdown(dp):
    logger.info("üî¥ –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")



        