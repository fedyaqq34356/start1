import asyncio
import logging
import os
import sys

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS, MAIN_CHANNEL_ID

logger = logging.getLogger(__name__)

async def get_bot():
    """Get bot instance dynamically to avoid circular imports"""
    from main import bot
    return bot

async def subscription_required(user_id: int) -> bool:
    """Check if user is subscribed to the main channel"""
    try:
        bot = await get_bot()
        member = await bot.get_chat_member(MAIN_CHANNEL_ID, user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']
        
        if not is_subscribed:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url="https://t.me/starsZEMSTA"))
            keyboard.add(InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
            
            await bot.send_message(
                user_id,
                "‚ùå –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                "üì¢ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É'",
                reply_markup=keyboard
            )
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø

async def send_order_to_admin(order_id: str, order: dict, payment_method: str):
    """Send order to admin for approval"""
    bot = await get_bot()
    
    order_text = f"""üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (ID: {order['user_id']})
üí∞ –ö –æ–ø–ª–∞—Ç–µ: {order['price']}‚Ç¥
üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}

{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ' + str(order['stars']) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order['months']) + ' –º–µ—Å—è—Ü–µ–≤'}

‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order['created_at']}
üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, order_text, reply_markup=keyboard)
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id} –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def send_card_order_to_admin(order_id: str, order: dict):
    """Send card payment order with screenshot to admin"""
    bot = await get_bot()
    
    order_text = f"""üìã –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π #{order_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (ID: {order['user_id']})
üì± Username –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {order.get('customer_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ –ö –æ–ø–ª–∞—Ç–µ: {order['price']}‚Ç¥
üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–∞

{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ' + str(order['stars']) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order['months']) + ' –º–µ—Å—è—Ü–µ–≤'}

‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order['created_at']}
üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    )
    
    for admin_id in ADMIN_IDS:
        try:
            if order.get('payment_screenshot'):
                await bot.send_photo(
                    admin_id, 
                    photo=order['payment_screenshot'],
                    caption=order_text,
                    reply_markup=keyboard
                )
            else:
                await bot.send_message(admin_id, order_text, reply_markup=keyboard)
            logger.info(f"–ó–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def handle_critical_error(exc_type, exc_value, exc_traceback):
    """Handle critical errors"""
    error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc_type.__name__}: {exc_value}"
    logger.critical(error_msg)
    
    # Notify admins about critical error
    try:
        bot = await get_bot()
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞!\n\n{error_msg}\n\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞..."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id} –æ–± –æ—à–∏–±–∫–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    # Wait a bit before restart
    await asyncio.sleep(5)
    await safe_restart()

async def safe_restart():
    """Safely restart the bot"""
    logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    
    try:
        # Close bot session
        bot = await get_bot()
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
    
    # Restart the process
    os.execv(sys.executable, ['python'] + sys.argv)
