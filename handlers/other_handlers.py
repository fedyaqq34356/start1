import logging
import random

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import config
from config import ADMIN_IDS
from keyboards import get_main_menu
from utils import subscription_required

logger = logging.getLogger(__name__)

async def get_bot():
    """Get bot instance dynamically to avoid circular imports"""
    from main import bot
    return bot

async def help_command(message: types.Message):
    help_text = """üìã –Ø–∫ –∫—É–ø–∏—Ç–∏ –∑—ñ—Ä–∫–∏ –∞–±–æ Telegram Premium:

1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å "–ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏" –∞–±–æ "–ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium" —É –º–µ–Ω—é
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–∞–∫–µ—Ç
3Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ (TON –∏–ª–∏ –∫–∞—Ä—Ç–æ–π)
4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
5Ô∏è‚É£ –î–ª—è –æ–ø–ª–∞—Ç—ã TON: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ
   –î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username, –∑–∞—Ç–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
6Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑—ñ—Ä–æ–∫ –∏–ª–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏

‚ùì –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"."""    
    await message.answer(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

async def reviews_channel(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì£ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url="https://t.me/starsZEMSTA"))
    await message.answer("üì£ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏")

async def support_contact(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup()
    random_admin_id = random.choice(ADMIN_IDS)
    keyboard.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ", url=f"tg://user?id={random_admin_id}"))
    
    await message.answer("üÜò –î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=keyboard)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –æ–±—Ä–∞–Ω–∏–π –∞–¥–º–∏–Ω {random_admin_id}")

async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def cancel_order_by_user(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id and order_id in config.orders:
        del config.orders[order_id]
        logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")
    await state.finish()
    await callback_query.message.edit_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑")

async def cancel_any_state(message: types.Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state:
        data = await state.get_data()
        order_id = data.get('order_id')
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if order_id and order_id in config.orders:
            del config.orders[order_id]
            
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    else:
        await message.answer("üè† –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=get_main_menu())

async def handle_other_messages(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    await message.answer("‚ùì –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏:", reply_markup=get_main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(help_command, commands=['help'])
    dp.register_message_handler(reviews_channel, text="üì£ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏")
    dp.register_message_handler(support_contact, text="üÜò –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")
    dp.register_callback_query_handler(back_to_main_menu, lambda c: c.data == "back_to_main")
    dp.register_callback_query_handler(cancel_order_by_user, lambda c: c.data == "cancel_order", state="*")
    dp.register_message_handler(cancel_any_state, lambda message: message.text and message.text.lower() in [
        '–≤—ñ–¥–º—ñ–Ω–∞', '–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel', '‚ùå –≤—ñ–¥–º—ñ–Ω–∞'
    ], state="*")
    dp.register_message_handler(handle_other_messages, lambda message: not message.text.startswith('/'), state=None, content_types=['text'])
