import logging
from datetime import datetime
import sqlite3

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from config import orders, REVIEWS_CHANNEL_ID, ADMIN_IDS
from keyboards import get_rating_keyboard, get_review_keyboard, get_main_menu
from states import ReviewStates
from main import bot

logger = logging.getLogger(__name__)

async def leave_review(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚≠ê –û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—à—É —Ä–æ–±–æ—Ç—É:",
        reply_markup=get_rating_keyboard()
    )
    await ReviewStates.waiting_for_rating.set()
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")

async def skip_review(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    await callback_query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è —â–µ! üåü")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    try:
        await state.finish()
    except:
        pass
    
    user_id = callback_query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for order_id, order in list(orders.items()):
        if order["user_id"] == user_id and order["status"] == "completed":
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ—Ç–∑—ã–≤")

async def back_to_review_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    await callback_query.message.edit_text(
        "üåü –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à—É —Ä–æ–±–æ—Ç—É:",
        reply_markup=get_review_keyboard()
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ
    try:
        await state.finish()
    except:
        pass
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ç–∑—ã–≤–∞")

async def handle_rating(callback_query: types.CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.split('_')[1])
    await state.update_data(rating=rating)
    
    await callback_query.message.edit_text(
        f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {'‚≠ê' * rating}\n\nüí¨ –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:"
    )
    await ReviewStates.waiting_for_review.set()
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –æ—Ü–µ–Ω–∫—É {rating}")

async def handle_review_text(message: types.Message, state: FSMContext):
    try:
        review_text = message.text
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: {review_text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        data = await state.get_data()
        rating = data.get('rating', 5)
        order_id = data.get('order_id')
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: rating={rating}, order_id={order_id}")

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
        purchase_info = ""
        if order_id and order_id in orders:
            order = orders[order_id]
            if order["type"] == "stars":
                stars_count = order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                purchase_info = f"üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: {stars_count}\n"
            elif order["type"] == "premium":
                months_count = order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                purchase_info = f"üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: {months_count} –º—ñ—Å—è—Ü—ñ–≤\n"
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {purchase_info}")
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            purchase_info = data.get('purchase_info', '')
            logger.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orders, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è purchase_info –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {purchase_info}")
            
            # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∂–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ order_id
            if not purchase_info and order_id:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ order_id (—Ñ–æ—Ä–º–∞—Ç: type_userid_timestamp)
                    parts = order_id.split('_')
                    if len(parts) >= 3:
                        order_type = parts[0]
                        if order_type == "stars":
                            purchase_info = "üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
                        elif order_type == "premium":
                            purchase_info = "üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
                    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ order_id: {purchase_info}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ order_id {order_id}: {e}")

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é
        if not purchase_info:
            purchase_info = "üõí –ü–æ–∫—É–ø–∫–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ\n"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        try:
            conn = sqlite3.connect('bot_database.db')
            c = conn.cursor()
            c.execute('''
                INSERT INTO reviews (user_id, username, rating, review_text, order_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                message.from_user.id,
                f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name,
                rating,
                review_text,
                order_id,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            conn.commit()
            review_id = c.lastrowid
            logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å ID {review_id}")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu()
            )
            await state.finish()
            return
        finally:
            conn.close()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏
        channel_message = f"""‚≠ê –ù–û–í–ò–ô –í–Ü–î–ì–£–ö #{review_id} ‚≠ê

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.full_name}
üì± Username: @{message.from_user.username if message.from_user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
{purchase_info}üåü –û—Ü—ñ–Ω–∫–∞: {'‚≠ê' * rating}
üìù –í—ñ–¥–≥—É–∫: {review_text}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

#–≤—ñ–¥–≥—É–∫ #–∑—ñ—Ä–∫–∏ #—Ç–µ–ª–µ–≥—Ä–∞–º"""
        
        try:
            await bot.send_message(REVIEWS_CHANNEL_ID, channel_message)
            logger.info(f"–û—Ç–∑—ã–≤ #{review_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {REVIEWS_CHANNEL_ID} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ: {purchase_info.strip()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª {REVIEWS_CHANNEL_ID}: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—É –≤ –∫–∞–Ω–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu()
            )
            await state.finish()
            return

        try:
            await message.answer(
                "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥–≥—É–∫—ñ–≤.",
                reply_markup=get_main_menu()
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}", exc_info=True)

        try:
            for admin_id in ADMIN_IDS:
                admin_message = f"üí¨ –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ #{review_id} –≤—ñ–¥ {message.from_user.full_name} ({rating}/5 –∑—ñ—Ä–æ–∫)\n{purchase_info.strip()}"
                await bot.send_message(admin_id, admin_message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º {ADMIN_IDS} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º {ADMIN_IDS}: {e}", exc_info=True)

        if order_id and order_id in orders:
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")

        logger.info(f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_review_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_menu()
        )
    
    finally:
        await state.finish()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(leave_review, lambda c: c.data == 'leave_review')
    dp.register_callback_query_handler(skip_review, lambda c: c.data == 'skip_review')
    dp.register_callback_query_handler(back_to_review_choice, lambda c: c.data == 'back_to_review_choice')
    dp.register_callback_query_handler(handle_rating, lambda c: c.data.startswith('rate_'), state=ReviewStates.waiting_for_rating)
    dp.register_message_handler(handle_review_text, state=ReviewStates.waiting_for_review)




    