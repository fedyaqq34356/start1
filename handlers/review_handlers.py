import logging
import sqlite3
from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from config import REVIEWS_CHANNEL_ID
from keyboards import get_main_menu
from states import ReviewStates

logger = logging.getLogger(__name__)

async def get_bot():
    """Get bot instance dynamically to avoid circular imports"""
    from main import bot
    return bot

async def handle_review_rating(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if callback_query.data == "skip_review":
        await callback_query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        await callback_query.answer()
        await state.finish()
        return
    
    rating = int(callback_query.data.replace("review_", ""))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    await state.update_data(rating=rating)
    
    await callback_query.message.edit_text(
        f"‚≠ê –í–∏ –æ–±—Ä–∞–ª–∏ –æ—Ü—ñ–Ω–∫—É: {rating}/5\n\n"
        "üí¨ –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):"
    )
    await ReviewStates.waiting_for_review_text.set()
    await callback_query.answer()

async def handle_review_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    review_text = message.text.strip()
    
    if message.text == "/skip":
        review_text = ""
    
    data = await state.get_data()
    rating = data.get('rating', 5)
    order_id = data.get('order_id', '')
    purchase_info = data.get('purchase_info', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_review(
        user_id=message.from_user.id,
        username=message.from_user.username or message.from_user.full_name,
        rating=rating,
        review_text=review_text,
        order_id=order_id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª
    if REVIEWS_CHANNEL_ID and rating >= 4:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–∑—ã–≤—ã
        await send_review_to_channel(
            rating=rating,
            review_text=review_text,
            username=message.from_user.username or message.from_user.first_name,
            purchase_info=purchase_info
        )
    
    await message.answer(
        "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å.",
        reply_markup=get_main_menu()
    )
    await state.finish()
    logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating}")

async def save_review(user_id: int, username: str, rating: int, review_text: str, order_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO reviews (user_id, username, rating, review_text, order_id, created_at) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, username, rating, review_text, order_id, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

async def send_review_to_channel(rating: int, review_text: str, username: str, purchase_info: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª"""
    try:
        bot = await get_bot()
        
        stars = "‚≠ê" * rating
        review_message = f"""üåü –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!

{stars} {rating}/5

üë§ –ö–ª—ñ—î–Ω—Ç: {username}
{purchase_info}

üí¨ –í—ñ–¥–≥—É–∫: {review_text if review_text else "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"}

‚ú® –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É! @ZEMSTA_stars_bot"""

        await bot.send_message(REVIEWS_CHANNEL_ID, review_message)
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {REVIEWS_CHANNEL_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª: {e}")

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        handle_review_rating, 
        lambda c: c.data.startswith("review_") or c.data == "skip_review"
    )
    dp.register_message_handler(
        handle_review_text, 
        state=ReviewStates.waiting_for_review_text
    )
