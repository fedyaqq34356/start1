import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import orders, ADMIN_IDS, user_ids, REVIEWS_CHANNEL_ID, RESTART_ON_ERROR
from keyboards import get_main_menu
from states import BroadcastStates, ReviewStates
from api_utils import get_recipient_address, get_ton_payment_body
from utils import safe_restart
from main import bot
import keyboards

logger = logging.getLogger(__name__)

async def handle_admin_card_approval(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        if callback_query.from_user.id not in ADMIN_IDS:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return

        action, order_id = callback_query.data.split("_", 1)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        if order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ orders: {orders}")
            await callback_query.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await callback_query.answer()
            return

        order = orders[order_id]
        user_id = order["user_id"]
        payment_method = order.get("payment_method", "card")
        is_text_message = not order.get("payment_screenshot")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        purchase_info = ""
        if order["type"] == "stars":
            stars_count = order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            purchase_info = f"üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: {stars_count}\n"
        elif order["type"] == "premium":
            months_count = order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            purchase_info = f"üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: {months_count} –º—ñ—Å—è—Ü—ñ–≤\n"

        if action == "approve":
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            if is_text_message:
                await callback_query.message.edit_reply_markup(reply_markup=None)
                await callback_query.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            else:
                await callback_query.message.edit_caption(
                    caption=callback_query.message.caption,
                    reply_markup=None
                )
                await callback_query.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

            if payment_method == "ton":
                quantity = order["stars"] if order["type"] == "stars" else order["months"]
                username = order["user_name"]
                recipient_address = await get_recipient_address(order["type"], user_id, username, quantity)
                if not recipient_address:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è {order['type']} (user_id: {user_id}, username: {username}, quantity: {quantity})")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ TON. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(
                            admin_id,
                            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user_id}): –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å TON."
                        )
                    await callback_query.answer()
                    return

                transaction_data = await get_ton_payment_body(order["type"], quantity, user_id, username)
                if not transaction_data:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON –¥–ª—è {order['type']} (user_id: {user_id}, username: {username}, quantity: {quantity})")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(
                            admin_id,
                            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó TON –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user_id})."
                        )
                    await callback_query.answer()
                    return

                payment_text = f"""üíé –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON Connect:

{'‚≠ê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫: ' + str(order['stars']) if order['type'] == 'stars' else 'üíé –¢–µ—Ä–º—ñ–Ω: ' + str(order['months']) + ' –º—ñ—Å—è—Ü—ñ–≤'}
üí∞ –°—É–º–∞: {order['price']}‚Ç¥

üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ TON Connect
üîí –ë–µ–∑–ø–µ—á–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω TON

‚ö†Ô∏è –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –≥–∞–º–∞–Ω—Ü—ñ, –∑—ñ—Ä–∫–∏/–ø—Ä–µ–º—ñ—É–º –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∞—à –∞–∫–∞—É–Ω—Ç."""
                try:
                    await bot.send_message(
                        user_id,
                        payment_text,
                        reply_markup=keyboards.get_ton_connect_keyboard(transaction_data, recipient_address)
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å TON Connect –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON Connect –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è TON Connect. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
            else:
                store_keyboard = InlineKeyboardMarkup()
                store_keyboard.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="https://split.tg/store"))
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                            reply_markup=store_keyboard
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                try:
                    await bot.send_message(
                        user_id,
                        "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!\nüí´ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.\n\n‚ùóÔ∏è –¶–µ –∑–∞–π–º–µ –≤—ñ–¥ 5 —Ö–≤–∏–ª–∏–Ω, –¥–æ 2 –≥–æ–¥–∏–Ω.",
                        reply_markup=get_main_menu()
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞
                    review_state = FSMContext(storage=state.storage, chat=user_id, user=user_id)
                    await review_state.update_data(order_id=order_id, purchase_info=purchase_info)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
                    await bot.send_message(
                        user_id,
                        "üåü –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à—É —Ä–æ–±–æ—Ç—É:",
                        reply_markup=keyboards.get_review_keyboard()
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ: {purchase_info.strip()}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                order["status"] = "completed"
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: {purchase_info.strip()}")

        else:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            if is_text_message:
                await callback_query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            else:
                await callback_query.message.edit_caption(caption="‚ùå –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            try:
                await bot.send_message(
                    user_id,
                    "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω.",
                    reply_markup=get_main_menu()
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –∏–∑ orders")

        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_card_approval –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}", exc_info=True)
        try:
            if is_text_message:
                await callback_query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            else:
                await callback_query.message.edit_caption(caption="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {edit_error}", exc_info=True)
            for admin_id in ADMIN_IDS:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}"
                )
        await callback_query.answer()

async def send_all_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /sendall –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = message.text[9:].strip()
    
    if not text:
        await message.answer("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /sendall <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
        return
    
    success_count = 0
    fail_count = 0
    
    await message.answer(f"üì° –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è {len(user_ids)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await message.answer(f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {fail_count}")

async def stats_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(user_ids)}
üìã –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}
üïí –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üì∫ –ö–∞–Ω–∞–ª –≤—ñ–¥–≥—É–∫—ñ–≤: {REVIEWS_CHANNEL_ID}
üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'‚úÖ' if RESTART_ON_ERROR else '‚ùå'}"""
    
    await message.answer(stats_text)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def start_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
    await BroadcastStates.waiting_for_broadcast_text.set()

async def handle_broadcast_text(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.finish()
        return




    text = message.text.strip()
    
    if not text:
        await message.answer("üìù –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    success_count = 0
    fail_count = 0
    
    await message.answer(f"üì° –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è {len(user_ids)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await message.answer(f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {fail_count}")
    await state.finish()

async def restart_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    await safe_restart()

async def cleanup_old_orders():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞"""
    while True:
        try:
            current_time = datetime.now()
            to_remove = []
            
            for order_id, order in orders.items():
                order_time = datetime.fromisoformat(order['created_at'])
                if current_time - order_time > timedelta(hours=1):
                    to_remove.append(order_id)
            
            for order_id in to_remove:
                user_id = orders[order_id]['user_id']
                try:
                    await bot.send_message(
                        user_id, 
                        "‚è∞ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º-–∞—É—Ç (1 –≥–æ–¥–∏–Ω–∞).",
                        reply_markup=get_main_menu()
                    )
                except:
                    pass
                del orders[order_id]
                logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ {order_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            
        await asyncio.sleep(300)  

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(handle_admin_card_approval, lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
    dp.register_message_handler(send_all_command, commands=['sendall'])
    dp.register_message_handler(stats_command, commands=['stats'])
    dp.register_message_handler(start_broadcast, text="üì§ –†–æ–∑—Å–∏–ª–∫–∞")
    dp.register_message_handler(handle_broadcast_text, state=BroadcastStates.waiting_for_broadcast_text)
    dp.register_message_handler(restart_command, commands=['restart'])
    # –ó–∞–ø—É—Å–∫ cleanup –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(cleanup_old_orders())