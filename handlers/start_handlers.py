import logging
from aiogram import types, Dispatcher
from aiogram.types import InputFile

from config import orders, user_ids, MAIN_CHANNEL_ID
from database import save_user
from keyboards import get_main_menu, get_stars_menu, get_premium_menu, get_subscription_keyboard
from utils import subscription_required
from main import bot  # –ò–º–ø–æ—Ä—Ç bot –∏–∑ main, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

logger = logging.getLogger(__name__)

async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_ids.add(user_id)
    save_user(user_id)
    
    if not await subscription_required(message.from_user.id):
        return
    
    welcome_text = """üåü –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ @ZEMSTA_stars_bot!
‚ú® –û–±–∏—Ä–∞–π, –∫—É–ø—É–π —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∑—ñ—Ä–∫–∞–º–∏!

üî• –ï–∫–æ–Ω–æ–º—ñ—è –¥–æ 30%!
üíé –û–ø–ª–∞—Ç–∞ TON –∞–±–æ ‚Ç¥ ‚Äî —è–∫ –∑—Ä—É—á–Ω–æ.

üëá –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ —ñ –ø–æ—á–∏–Ω–∞–π –ª–µ–≥–∫–æ! üòä"""
    
    try:
        with open('welcome_image.jpg', 'rb') as photo:
            await message.answer_photo(photo, caption=welcome_text, reply_markup=get_main_menu())
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª welcome_image.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer(welcome_text, reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(welcome_text, reply_markup=get_main_menu())
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç")

async def stars_menu(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é –∑–≤–µ–∑–¥")
    if not await subscription_required(message.from_user.id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
        return
        
    await message.answer(
        "üåü –ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏ –º–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫–∏–º–∏ —Ü—ñ–Ω–∞–º–∏:",
        reply_markup=get_stars_menu()
    )

async def premium_menu(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    await message.answer(
        "üíé –ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium –º–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫–∏–º–∏ —Ü—ñ–Ω–∞–º–∏:",
        reply_markup=get_premium_menu()
    )

async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if await check_subscription(user_id):
        await callback_query.message.edit_text(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!",
            reply_markup=None
        )
        await bot.send_message(user_id, "üåü–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
    else:
        await callback_query.answer("‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(MAIN_CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(stars_menu, text="üåü –ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏")
    dp.register_message_handler(premium_menu, text="üíé –ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium")
    dp.register_callback_query_handler(check_subscription_callback, lambda c: c.data == "check_subscription")