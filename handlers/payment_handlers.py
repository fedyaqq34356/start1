import asyncio
import logging
import os
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

import config
from config import orders, VIDEO_PATH, CARD_NUMBER, ADMIN_IDS
from keyboards import get_cancel_keyboard, get_ton_connect_keyboard, get_main_menu
from states import CardPaymentStates
from api_utils import get_recipient_address, get_ton_payment_body
from utils import send_order_to_admin, send_card_order_to_admin

logger = logging.getLogger(__name__)

async def get_bot():
    """Get bot instance dynamically to avoid circular imports"""
    from main import bot
    return bot

async def handle_selection(callback_query: types.CallbackQuery, state: FSMContext):
    selection = callback_query.data.replace("select_", "")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–∞–∫–µ—Ç: {selection}")
    if selection not in config.STAR_PRICES:
        logger.error(f"–ü–∞–∫–µ—Ç {selection} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    order_data = config.STAR_PRICES[selection]
    
    order_id = f"{order_data['type']}_{callback_query.from_user.id}_{int(datetime.now().timestamp())}"
    username = f"@{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name
    orders[order_id] = {
        "user_id": callback_query.from_user.id,
        "user_name": username,
        "type": order_data["type"],
        "price": order_data["price"],
        "status": "pending",
        "created_at": datetime.now().isoformat()
    }
    
    if order_data["type"] == "stars":
        orders[order_id]["stars"] = order_data["stars"]
    else:
        orders[order_id]["months"] = order_data["months"]
    
    await state.update_data(order_id=order_id)
    
    payment_text = f"""üí≥ –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:

{'‚≠ê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫: ' + str(order_data['stars']) if order_data['type'] == 'stars' else 'üíé –¢–µ—Ä–º—ñ–Ω: ' + str(order_data['months']) + ' –º—ñ—Å—è—Ü—ñ–≤'}
üí∞ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {order_data['price']}‚Ç¥

–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:
üíé –û–ø–ª–∞—Ç–∞ TON - —á–µ—Ä–µ–∑ TON Connect
üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"""
    
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    
    # Import keyboards dynamically to avoid circular imports
    import keyboards
    await callback_query.message.edit_text(payment_text, reply_markup=keyboards.get_payment_method_keyboard(order_id))
    await callback_query.answer()

async def handle_card_payment(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    bot = await get_bot()
    
    try:
        order_id = callback_query.data.replace("pay_card_", "")
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")

        if order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback_query.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await callback_query.answer()
            return

        order = orders[order_id]
        order["payment_method"] = "card"
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑: {order}")

        try:
            if os.path.exists(VIDEO_PATH) and os.access(VIDEO_PATH, os.R_OK):
                await bot.send_video(
                    callback_query.from_user.id,
                    video=InputFile(VIDEO_PATH),
                    caption="üìπ –ü—Ä–∏–∫–ª–∞–¥ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ—é"
                )
                logger.info(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}")
            else:
                logger.warning(f"–í–∏–¥–µ–æ {VIDEO_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                await bot.send_message(callback_query.from_user.id, "üìπ –ü—Ä–∏–∫–ª–∞–¥ –æ–ø–ª–∞—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}: {str(e)}")
            await bot.send_message(callback_query.from_user.id, "üìπ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–∫–ª–∞–¥—É –æ–ø–ª–∞—Ç–∏")

        payment_text = f"""üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π:

–î–æ –æ–ø–ª–∞—Ç–∏: {order['price']} –≥—Ä–Ω

üìã –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:
üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: `{CARD_NUMBER}`

‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π username (@username) –Ω–∞ —è–∫—ñ –º–∞—é—Ç—å –ø—Ä–∏–π—Ç–∏ –∑—ñ—Ä–∫–∏
üí° Username –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (_)"""
        
        await callback_query.message.answer(
            payment_text,
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}")

        await state.update_data(order_id=order_id)
        await CardPaymentStates.waiting_for_username.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_card_payment –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}")
        await callback_query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await callback_query.answer()

async def handle_username_input(message: types.Message, state: FSMContext):
    bot = await get_bot()
    
    try:
        username = message.text.strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω username: {username} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        data = await state.get_data()
        order_id = data.get('order_id')
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ order_id: {order_id}")

        if order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return

        orders[order_id]['customer_username'] = username

        await message.answer(
            f"""‚úÖ Username –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {username}

üí≥ –¢–µ–ø–µ—Ä –æ–ø–ª–∞—Ç—ñ—Ç—å {orders[order_id]['price']} –≥—Ä–Ω –Ω–∞ –∫–∞—Ä—Ç–∫—É:
`{CARD_NUMBER}`

üì∑ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ –≤ —á–∞—Ç —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏.""",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )

        await CardPaymentStates.waiting_for_payment_screenshot.set()
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_payment_screenshot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_username_input –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ username. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.finish()

async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        
        if order_id not in orders:
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –∑–∞–∫–∞–∑
        orders[order_id]['payment_screenshot'] = message.photo[-1].file_id
        orders[order_id]['status'] = 'pending_admin'
        
        await message.answer(
            "‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.\n"
            "‚è≥ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–∑–∞–∑–≤–∏—á–∞–π –¥–æ 30 —Ö–≤–∏–ª–∏–Ω).",
            reply_markup=get_main_menu()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_card_order_to_admin(order_id, orders[order_id])
        
        await state.finish()
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.finish()

async def handle_wrong_content_type(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ (—Ñ–æ—Ç–æ), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

async def handle_ton_payment(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.replace("pay_ton_", "")
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON-–æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")
    
    if order_id not in orders:
        logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    order = orders[order_id]
    if order.get("status") == "pending_admin":
        logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await callback_query.message.edit_text("‚è≥ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await callback_query.answer()
        return
    
    order["payment_method"] = "ton"
    order["status"] = "pending_admin"
    logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {order}")
    
    await callback_query.message.edit_text("‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    await send_order_to_admin(order_id, order, "TON")
    await callback_query.answer()

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(handle_selection, lambda c: c.data.startswith("select_"))
    dp.register_callback_query_handler(handle_card_payment, lambda c: c.data.startswith("pay_card_"))
    dp.register_message_handler(handle_username_input, state=CardPaymentStates.waiting_for_username)
    dp.register_message_handler(handle_payment_screenshot, content_types=['photo'], state=CardPaymentStates.waiting_for_payment_screenshot)
    dp.register_message_handler(handle_wrong_content_type, lambda message: message.content_type != 'photo', state=CardPaymentStates.waiting_for_payment_screenshot)
    dp.register_callback_query_handler(handle_ton_payment, lambda c: c.data.startswith("pay_ton_"))
