import asyncio
import logging
import os
import sys
import traceback
from datetime import datetime

from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import BOT_TOKEN, RESTART_ON_ERROR, ADMIN_IDS
from database import init_db
from handlers import (
    start_handlers,
    payment_handlers,
    review_handlers,
    admin_handlers,
    other_handlers
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def on_startup(dp):
    """Initialize database and other startup tasks"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É cleanup_old_orders –∑–¥–µ—Å—å
    from admin_handlers import cleanup_old_orders
    asyncio.create_task(cleanup_old_orders())
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ cleanup_old_orders –∑–∞–ø—É—â–µ–Ω–∞")
    
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    """Cleanup on shutdown"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
start_handlers.register_handlers(dp)
payment_handlers.register_handlers(dp)
review_handlers.register_handlers(dp)
admin_handlers.register_handlers(dp)
other_handlers.register_handlers(dp)

if __name__ == '__main__':
    print("üåü Telegram Bot –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –∑—ñ—Ä–æ–∫ —Ç–∞ Telegram Premium")
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üë§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_IDS}")
    print(f"üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'‚úÖ' if RESTART_ON_ERROR else '‚ùå'}")
    
    if RESTART_ON_ERROR:
        async def handle_critical_error_wrapper(exc_type, exc_value, exc_traceback):
            from utils import handle_critical_error
            await handle_critical_error(exc_type, exc_value, exc_traceback)
        
        sys.excepthook = lambda exc_type, exc_value, exc_traceback: asyncio.run(
            handle_critical_error_wrapper(exc_type, exc_value, exc_traceback)
        )
    
    try:
        executor.start_polling(
            dp, 
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        if RESTART_ON_ERROR:
            async def safe_restart_wrapper():
                from utils import safe_restart
                await safe_restart()
            asyncio.run(safe_restart_wrapper())
        else:
            raise
