import asyncio
import logging
import aiohttp
import os
import sys
import traceback
import sqlite3
import random
from datetime import datetime
from typing import Optional, Dict
from aiogram.types import InputFile
import asyncio
from datetime import datetime, timedelta


from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from dotenv import load_dotenv
import re
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID_RAW = os.getenv('ADMIN_ID', '0')
try:
    ADMIN_IDS = [int(x.strip()) for x in ADMIN_ID_RAW.split(",") if x.strip()]
except ValueError:
    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ADMIN_ID: '{ADMIN_ID_RAW}'. –û–∂–∏–¥–∞—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    exit(1)

SPLIT_API_TOKEN = os.getenv('SPLIT_API_TOKEN')
SPLIT_API_URL = os.getenv('SPLIT_API_URL')
REVIEWS_CHANNEL_ID = int(os.getenv('REVIEWS_CHANNEL_ID', '0'))
RESTART_ON_ERROR = os.getenv('RESTART_ON_ERROR', 'true').lower() == 'true'
MAIN_CHANNEL_ID = int(os.getenv('MAIN_CHANNEL_ID', '0'))
CARD_NUMBER = os.getenv('CARD_NUMBER')
VIDEO_PATH = "payment_example.mp4"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE' or not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    exit(1)

if ADMIN_IDS == 0:
    logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")

if not CARD_NUMBER:
    logger.error("‚ùå CARD_NUMBER –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")
    exit(1)

if not REVIEWS_CHANNEL_ID:
    logger.error("‚ùå REVIEWS_CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        c.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                rating INTEGER,
                review_text TEXT,
                order_id TEXT,
                created_at TEXT,
                username TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY
            )
        ''')
        c.execute("PRAGMA table_info(reviews)")
        columns = [info[1] for info in c.fetchall()]
        if 'username' not in columns:
            c.execute('ALTER TABLE reviews ADD COLUMN username TEXT')
        if 'order_id' not in columns:
            c.execute('ALTER TABLE reviews ADD COLUMN order_id TEXT')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å id >= 60
        c.execute("SELECT COUNT(*) FROM reviews WHERE id >= 80")
        conflict_count = c.fetchone()[0]
        if conflict_count == 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –Ω–∞ 59 (—Å–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç 60)
            c.execute("SELECT seq FROM sqlite_sequence WHERE name='reviews'")
            result = c.fetchone()
            if result is None:
                c.execute("INSERT INTO sqlite_sequence (name, seq) VALUES ('reviews', 79)")
                logger.info("–ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–ª—è reviews —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 79 (—Å–ª–µ–¥—É—é—â–∏–π ID –±—É–¥–µ—Ç 80)")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 59
                if result[0] < 79:
                    c.execute("UPDATE sqlite_sequence SET seq = 79 WHERE name = 'reviews'")
                    logger.info("–ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–ª—è reviews –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 79 (—Å–ª–µ–¥—É—é—â–∏–π ID –±—É–¥–µ—Ç 80)")
                else:
                    logger.info(f"–ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {result[0]}, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º")

        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except ValueError as ve:
        logger.error(str(ve))
    finally:
        conn.close()

# –î–û–ë–ê–í–ò–¢–¨ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–¥:



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_users():
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT user_id FROM users")
        user_ids = {row[0] for row in c.fetchall()}
        conn.close()
        return user_ids
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_user(user_id: int):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
class CardPaymentStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_payment_screenshot = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class ReviewStates(StatesGroup):
    waiting_for_review = State()
    waiting_for_rating = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_broadcast_text = State()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
user_ids = load_users()

# –¶—ñ–Ω–∏ –Ω–∞ –∑—ñ—Ä–∫–∏ —Ç–∞ Telegram Premium
STAR_PRICES = {
    "50‚≠ê ‚Äì 42.5‚Ç¥": {"stars": 50, "price": 42.5, "type": "stars"},
    "100‚≠ê ‚Äì 85‚Ç¥": {"stars": 100, "price": 85, "type": "stars"},
    "200‚≠ê ‚Äì 170‚Ç¥": {"stars": 200, "price": 170, "type": "stars"},
    "300‚≠ê ‚Äì 255‚Ç¥": {"stars": 300, "price": 255, "type": "stars"},
    "400‚≠ê ‚Äì 340‚Ç¥": {"stars": 400, "price": 340, "type": "stars"},
    "500‚≠ê ‚Äì 410‚Ç¥": {"stars": 500, "price": 410, "type": "stars"},  # –ò–ó–ú–ï–ù–ï–ù–û –° 390
    "1000‚≠ê ‚Äì 825‚Ç¥": {"stars": 1000, "price": 825, "type": "stars"},
    "10000‚≠ê ‚Äì 8150‚Ç¥": {"stars": 10000, "price": 8150, "type": "stars"},  # –î–û–ë–ê–í–õ–ï–ù–û
    "3 –º—ñ—Å—è—Ü—ñüíé ‚Äì 669‚Ç¥": {"months": 3, "price": 669, "type": "premium"},
    "6 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 999‚Ç¥": {"months": 6, "price": 999, "type": "premium"},
    "12 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 1699‚Ç¥": {"months": 12, "price": 1699, "type": "premium"},
}

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å
orders = {}

def get_main_menu(user_id: int | None = None) -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üåü –ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏"))
    keyboard.add(KeyboardButton("üíé –ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium"))
    keyboard.add(KeyboardButton("üíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"))
    keyboard.add(KeyboardButton("üì£ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏"))

    if user_id is not None and user_id in ADMIN_IDS:
        keyboard.add(KeyboardButton("üì§ –†–æ–∑—Å–∏–ª–∫–∞"))

    return keyboard

def get_stars_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("50‚≠ê ‚Äì 42.5‚Ç¥", callback_data="select_50‚≠ê ‚Äì 42.5‚Ç¥"),
        InlineKeyboardButton("100‚≠ê ‚Äì 85‚Ç¥", callback_data="select_100‚≠ê ‚Äì 85‚Ç¥"),
        InlineKeyboardButton("200‚≠ê ‚Äì 170‚Ç¥", callback_data="select_200‚≠ê ‚Äì 170‚Ç¥"),
        InlineKeyboardButton("300‚≠ê ‚Äì 255‚Ç¥", callback_data="select_300‚≠ê ‚Äì 255‚Ç¥"),
        InlineKeyboardButton("400‚≠ê ‚Äì 340‚Ç¥", callback_data="select_400‚≠ê ‚Äì 340‚Ç¥"),
        InlineKeyboardButton("500‚≠ê ‚Äì 410‚Ç¥", callback_data="select_500‚≠ê ‚Äì 410‚Ç¥"),  # –ò–ó–ú–ï–ù–ï–ù–û
        InlineKeyboardButton("1000‚≠ê ‚Äì 825‚Ç¥", callback_data="select_1000‚≠ê ‚Äì 825‚Ç¥"),
        InlineKeyboardButton("10000‚≠ê ‚Äì 8150‚Ç¥", callback_data="select_10000‚≠ê ‚Äì 8150‚Ç¥")  # –î–û–ë–ê–í–õ–ï–ù–û
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

def get_premium_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñüíé ‚Äì 669‚Ç¥", callback_data="select_3 –º—ñ—Å—è—Ü—ñüíé ‚Äì 669‚Ç¥"),
        InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 999‚Ç¥", callback_data="select_6 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 999‚Ç¥"),
        InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 1699‚Ç¥", callback_data="select_12 –º—ñ—Å—è—Ü—ñ–≤üíé ‚Äì 1699‚Ç¥")
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

def get_payment_method_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é", callback_data=f"pay_card_{order_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üíé –°–ø–ª–∞—Ç–∏—Ç–∏ TON", callback_data=f"pay_ton_{order_id}")
    )
    keyboard.add(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="cancel_order"))
    return keyboard

def get_admin_card_approval_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"reject_{order_id}")
    )
    return keyboard

def get_review_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚≠ê –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="leave_review"),
    )
    return keyboard

def get_rating_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚≠ê", callback_data="rate_1"),
        InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")
    )
    return keyboard

def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì∫ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=f"https://t.me/starsZEMSTA_news"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
    return keyboard

def get_ton_connect_keyboard(transaction_data: Dict, recipient_address: str):
    keyboard = InlineKeyboardMarkup()
    ton_connect_url = f"ton://transfer/{recipient_address}"
    params = []
    if transaction_data.get('messages'):
        message = transaction_data.get('messages', [{}])[0]
        if message.get('amount'):
            params.append(f"amount={message['amount']}")
        if message.get('payload'):
            params.append(f"bin={message['payload']}")
    if params:
        ton_connect_url += "?" + "&".join(params)
    keyboard.add(InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON Connect", url=ton_connect_url))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order"))
    return keyboard

def get_cancel_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="cancel_order"))
    return keyboard

async def get_recipient_address(service_type: str, user_id: int, username: str, quantity: int = 1) -> Optional[str]:
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–ª—è {service_type} (user_id: {user_id}, username: {username}, quantity: {quantity})")
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {SPLIT_API_TOKEN}",
                "Content-Type": "application/json"
            }
            endpoint = f"/buy/{'premium' if service_type == 'premium' else 'stars'}"
            data = {
                "user_id": user_id,
                "username": username
            }
            if service_type == "premium":
                data["months"] = quantity
            else:
                data["quantity"] = quantity
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {SPLIT_API_URL}{endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
            async with session.post(
                f"{SPLIT_API_URL}{endpoint}",
                headers=headers,
                json=data,
                timeout=30
            ) as response:
                logger.info(f"–û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status}")
                if response.status == 200:
                    response_data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_data}")
                    try:
                        address = response_data.get('message', {}).get('transaction', {}).get('messages', [{}])[0].get('address')
                        if not address:
                            logger.error(f"–ü–æ–ª–µ 'address' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API: {response_data}")
                            return None
                        return address
                    except (KeyError, IndexError) as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}, –æ—Ç–≤–µ—Ç: {response_data}")
                        return None
                else:
                    response_text = await response.text()
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏: {response.status}, —Ç–µ–∫—Å—Ç: {response_text}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–¥—Ä–µ—Å–∏: {str(e)}")
        return None



async def get_ton_payment_body(service_type: str, quantity: int, user_id: int, username: str, inviter_wallet: str = None) -> Optional[Dict]:
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {SPLIT_API_TOKEN}",
                "Content-Type": "application/json"
            }
            endpoint = f"/buy/{'premium' if service_type == 'premium' else 'stars'}"
            data = {
                "user_id": user_id,
                "username": username
            }
            if service_type == "premium":
                data["months"] = quantity
            else:
                data["quantity"] = quantity
            if inviter_wallet:
                data["inviter_wallet"] = inviter_wallet
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {SPLIT_API_URL}{endpoint} –¥–ª—è TON —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
            async with session.post(
                f"{SPLIT_API_URL}{endpoint}",
                headers=headers,
                json=data,
                timeout=30
            ) as response:
                logger.info(f"–û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status}")
                if response.status == 200:
                    response_data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_data}")
                    try:
                        transaction = response_data.get('message', {}).get('transaction', {})
                        if not transaction:
                            logger.error(f"–ü–æ–ª–µ 'transaction' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API: {response_data}")
                            return None
                        return transaction
                    except (KeyError, IndexError) as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}, –æ—Ç–≤–µ—Ç: {response_data}")
                        return None
                else:
                    response_text = await response.text()
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON: {response.status}, —Ç–µ–∫—Å—Ç: {response_text}")
                    return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON: {e}")
        return None

async def send_order_to_admin(order_id: str, order: Dict, payment_method: str):
    order_text = f"""üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (@{order['user_id']})
üì¶ –¢–∏–ø: {'–ó–≤–µ–∑–¥—ã' if order['type'] == 'stars' else 'Telegram Premium'}
{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) + ' –º–µ—Å—è—Ü–µ–≤'}
üí∞ –°—É–º–º–∞: {order['price']}‚Ç¥
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}
üïí –í—Ä–µ–º—è: {order['created_at']}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, order_text, reply_markup=get_admin_card_approval_keyboard(order_id))
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def send_card_order_to_admin(order_id: str, order: Dict):
    try:
        order_text = f"""üí≥ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_name']} (ID: {order['user_id']})
üìù Username –∫–ª–∏–µ–Ω—Ç–∞: @{order.get('customer_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üì¶ –¢–∏–ø: {'–ó–≤–µ–∑–¥—ã' if order['type'] == 'stars' else 'Telegram Premium'}
{'‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' + str(order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) if order['type'] == 'stars' else 'üíé –°—Ä–æ–∫: ' + str(order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')) + ' –º–µ—Å—è—Ü–µ–≤'}
üí∞ –°—É–º–º–∞: {order['price']}‚Ç¥
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–æ–π
üïí –í—Ä–µ–º—è: {order['created_at']}

–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:"""
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_photo(
                    admin_id,
                    photo=order['payment_screenshot'],
                    caption=order_text,
                    reply_markup=get_admin_card_approval_keyboard(order_id)
                )
                logger.info(f"–ó–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π {order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                await bot.send_message(
                    order['user_id'],
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                    reply_markup=get_main_menu()
                )
                return
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ send_card_order_to_admin –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}", exc_info=True)
        await bot.send_message(
            order['user_id'],
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
            reply_markup=get_main_menu()
        )

@dp.callback_query_handler(lambda c: c.data.startswith("pay_card_"))
async def handle_card_payment(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    try:
        order_id = callback_query.data.replace("pay_card_", "")
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")

        if order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback_query.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await callback_query.answer()
            return

        order = orders[order_id]
        order["payment_method"] = "card"
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑: {order}")



        payment_text = f"""‚ú®–í–∫–∞–∂—ñ—Ç—å @username (—Ç–µ–≥), –Ω–∞ —è–∫–∏–π —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑—ñ—Ä–∫–∏.

‚ö†Ô∏è–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω—ñ–∫!"""

        
        await callback_query.message.answer(
            payment_text,
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}")

        await state.update_data(order_id=order_id)
        await CardPaymentStates.waiting_for_username.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_card_payment –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}")
        await callback_query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await callback_query.answer()


@dp.message_handler(state=CardPaymentStates.waiting_for_username)
async def handle_username_input(message: types.Message, state: FSMContext):
    try:
        username = message.text.strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω username: {username} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è username
        if not username:
            await message.answer("‚ùå Username –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return

        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –¥–æ–±–∞–≤–∏–ª
        if username.startswith('@'):
            username = username[1:]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –¥–ª–∏–Ω–∞ 5-32 —Å–∏–º–≤–æ–ª–∞)
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username!\n\n"
                "Username –ø–æ–≤–∏–Ω–µ–Ω:\n"
                "‚Ä¢ –ú—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (a-z, A-Z)\n"
                "‚Ä¢ –¶–∏—Ñ—Ä–∏ (0-9)\n"
                "‚Ä¢ –ü—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (_)\n"
                "‚Ä¢ –ë—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 5 –¥–æ 32 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "‚Ä¢ –ù–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: user_name –∞–±–æ UserName123\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return

        data = await state.get_data()
        order_id = data.get('order_id')
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ order_id: {order_id}")

        if not order_id or order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –∑–∞–∫–∞–∑
        orders[order_id]['customer_username'] = username
        logger.info(f"Username {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await message.answer(
            f"üí≥ –ë–∞–Ω–∫ –£–∫—Ä–∞—ó–Ω–∏\n"
            f"–ö–∞—Ä—Ç–∞: {CARD_NUMBER}\n\n"
            f"üí∞ –î–æ –æ–ø–ª–∞—Ç–∏: {orders[order_id]['price']:.2f} UAH\n\n"
            f"‚öôÔ∏è–ó—ñ—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: @{username}\n"
            f"‚≠êÔ∏è@{username} –æ—Ç—Ä–∏–º–∞—î: {orders[order_id]['stars']} ‚≠êÔ∏è\n\n"
            f"üì∏ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å—é–¥–∏ –≤ —á–∞—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –æ–ø–ª–∞—Ç–∏:",
            reply_markup=get_cancel_keyboard()
        )

        await CardPaymentStates.waiting_for_payment_screenshot.set()
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_payment_screenshot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_username_input –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ username. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –í—ñ–¥–º—ñ–Ω–∞' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
            reply_markup=get_cancel_keyboard()
        )
        # –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ –ø–æ–ø—ã—Ç–∫—É
        
async def check_split_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Split API"""
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"Authorization": f"Bearer {SPLIT_API_TOKEN}"}
            async with session.get(f"{SPLIT_API_URL}/health", headers=headers, timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"Split API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

@dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def handle_admin_card_approval(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        if callback_query.from_user.id not in ADMIN_IDS:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return

        action, order_id = callback_query.data.split("_", 1)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        if order_id not in orders:
            logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ orders: {orders}")
            await callback_query.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await callback_query.answer()
            return

        order = orders[order_id]
        user_id = order["user_id"]
        payment_method = order.get("payment_method", "card")
        is_text_message = not order.get("payment_screenshot")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        purchase_info = ""
        if order["type"] == "stars":
            stars_count = order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            purchase_info = f"üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: {stars_count}\n"
        elif order["type"] == "premium":
            months_count = order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            purchase_info = f"üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: {months_count} –º—ñ—Å—è—Ü—ñ–≤\n"

        if action == "approve":
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            if is_text_message:
                await callback_query.message.edit_reply_markup(reply_markup=None)
                await callback_query.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            else:
                await callback_query.message.edit_caption(
                    caption=callback_query.message.caption,
                    reply_markup=None
                )
                await callback_query.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

            if payment_method == "ton":
                quantity = order["stars"] if order["type"] == "stars" else order["months"]
                username = order["user_name"]
                recipient_address = await get_recipient_address(order["type"], user_id, username, quantity)
                if not recipient_address:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è {order['type']} (user_id: {user_id}, username: {username}, quantity: {quantity})")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ TON. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(
                            admin_id,
                            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user_id}): –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å TON."
                        )
                    await callback_query.answer()
                    return

                transaction_data = await get_ton_payment_body(order["type"], quantity, user_id, username)
                if not transaction_data:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON –¥–ª—è {order['type']} (user_id: {user_id}, username: {username}, quantity: {quantity})")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(
                            admin_id,
                            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó TON –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user_id})."
                        )
                    await callback_query.answer()
                    return

                payment_text = f"""üíé –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON Connect:

{'‚≠ê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫: ' + str(order['stars']) if order['type'] == 'stars' else 'üíé –¢–µ—Ä–º—ñ–Ω: ' + str(order['months']) + ' –º—ñ—Å—è—Ü—ñ–≤'}
üí∞ –°—É–º–∞: {order['price']}‚Ç¥

üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ TON Connect
üîí –ë–µ–∑–ø–µ—á–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω TON

‚ö†Ô∏è –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –≥–∞–º–∞–Ω—Ü—ñ, –∑—ñ—Ä–∫–∏/–ø—Ä–µ–º—ñ—É–º –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∞—à –∞–∫–∞—É–Ω—Ç."""
                try:
                    await bot.send_message(
                        user_id,
                        payment_text,
                        reply_markup=get_ton_connect_keyboard(transaction_data, recipient_address)
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å TON Connect –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON Connect –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è TON Connect. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=get_main_menu()
                    )
            else:
                store_keyboard = InlineKeyboardMarkup()
                store_keyboard.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="https://split.tg/store"))
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                            reply_markup=store_keyboard
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                try:
                    await bot.send_message(
                        user_id,
                        "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!\nüí´ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.\n\n‚ÄºÔ∏è –¶–µ –∑–∞–π–º–µ –≤—ñ–¥ 5 —Ö–≤–∏–ª–∏–Ω, –¥–æ 2 –≥–æ–¥–∏–Ω.",
                        reply_markup=get_main_menu()
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
                    review_state = FSMContext(storage, chat=user_id, user=user_id)
                    await review_state.update_data(order_id=order_id, purchase_info=purchase_info)
                    
                    await bot.send_message(
                        user_id,
                        "üåü –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à—É —Ä–æ–±–æ—Ç—É:",
                        reply_markup=get_review_keyboard()
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ: {purchase_info.strip()}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                order["status"] = "completed"
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: {purchase_info.strip()}")

        else:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            if is_text_message:
                await callback_query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            else:
                await callback_query.message.edit_caption(caption="‚ùå –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            try:
                await bot.send_message(
                    user_id,
                    "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω.",
                    reply_markup=get_main_menu()
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –∏–∑ orders")

        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_card_approval –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}", exc_info=True)
        try:
            if is_text_message:
                await callback_query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            else:
                await callback_query.message.edit_caption(caption="‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {edit_error}", exc_info=True)
            for admin_id in ADMIN_IDS:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}"
                )
        await callback_query.answer()

async def cleanup_old_orders():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞"""
    while True:
        try:
            current_time = datetime.now()
            to_remove = []
            
            for order_id, order in orders.items():
                order_time = datetime.fromisoformat(order['created_at'])
                if current_time - order_time > timedelta(hours=1):
                    to_remove.append(order_id)
            
            for order_id in to_remove:
                user_id = orders[order_id]['user_id']
                try:
                    await bot.send_message(
                        user_id, 
                        "‚è∞ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º-–∞—É—Ç (1 –≥–æ–¥–∏–Ω–∞).",
                        reply_markup=get_main_menu()
                    )
                except:
                    pass
                del orders[order_id]
                logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ {order_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            
        await asyncio.sleep(300)  

@dp.callback_query_handler(lambda c: c.data.startswith("pay_ton_"))
async def handle_ton_payment(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.replace("pay_ton_", "")
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON-–æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")
    
    if order_id not in orders:
        logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    order = orders[order_id]
    if order.get("status") == "pending_admin":
        logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await callback_query.message.edit_text("‚è≥ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await callback_query.answer()
        return
    
    order["payment_method"] = "ton"
    order["status"] = "pending_admin"
    logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {order}")
    
    await callback_query.message.edit_text("‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    await send_order_to_admin(order_id, order, "TON")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'leave_review')
async def start_review(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚≠ê –û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—à—É —Ä–æ–±–æ—Ç—É:",
        reply_markup=get_rating_keyboard()
    )
    await ReviewStates.waiting_for_rating.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")

@dp.callback_query_handler(lambda c: c.data == 'skip_review')
async def skip_review(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è —â–µ! üåü")
    user_id = callback_query.from_user.id
    for order_id, order in list(orders.items()):
        if order["user_id"] == user_id and order["status"] == "completed":
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ—Ç–∑—ã–≤")

@dp.callback_query_handler(lambda c: c.data.startswith('rate_'), state=ReviewStates.waiting_for_rating)
async def handle_rating(callback_query: types.CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.split('_')[1])
    await state.update_data(rating=rating)
    
    await callback_query.message.edit_text(
        f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {'‚≠ê' * rating}\n\nüí¨ –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:"
    )
    await ReviewStates.waiting_for_review.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –æ—Ü–µ–Ω–∫—É {rating}")

@dp.message_handler(state=ReviewStates.waiting_for_review)
async def handle_review_text(message: types.Message, state: FSMContext):
    try:
        review_text = message.text
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: {review_text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        data = await state.get_data()
        rating = data.get('rating', 5)
        order_id = data.get('order_id')
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: rating={rating}, order_id={order_id}")

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
        purchase_info = ""
        if order_id and order_id in orders:
            order = orders[order_id]
            if order["type"] == "stars":
                stars_count = order.get('stars', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                purchase_info = f"üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: {stars_count}\n"
            elif order["type"] == "premium":
                months_count = order.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                purchase_info = f"üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: {months_count} –º—ñ—Å—è—Ü—ñ–≤\n"
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {purchase_info}")
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            purchase_info = data.get('purchase_info', '')
            logger.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orders, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è purchase_info –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {purchase_info}")
            
            # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∂–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ order_id
            if not purchase_info and order_id:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ order_id (—Ñ–æ—Ä–º–∞—Ç: type_userid_timestamp)
                    parts = order_id.split('_')
                    if len(parts) >= 3:
                        order_type = parts[0]
                        if order_type == "stars":
                            purchase_info = "üåü –ö—É–ø–ª–µ–Ω–æ –∑—ñ—Ä–æ–∫: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
                        elif order_type == "premium":
                            purchase_info = "üíé –ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–º—ñ—É–º: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ\n"
                    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ order_id: {purchase_info}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ order_id {order_id}: {e}")

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é
        if not purchase_info:
            purchase_info = "üõí –ü–æ–∫—É–ø–∫–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ\n"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        try:
            conn = sqlite3.connect('bot_database.db')
            c = conn.cursor()
            c.execute('''
                INSERT INTO reviews (user_id, username, rating, review_text, order_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                message.from_user.id,
                f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name,
                rating,
                review_text,
                order_id,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            conn.commit()
            review_id = c.lastrowid
            logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å ID {review_id}")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu()
            )
            await state.finish()
            return
        finally:
            conn.close()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏
        channel_message = f"""‚≠ê –ù–û–í–ò–ô –í–Ü–î–ì–£–ö #{review_id} ‚≠ê

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.full_name}
üì± Username: @{message.from_user.username if message.from_user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
{purchase_info}üåü –û—Ü—ñ–Ω–∫–∞: {'‚≠ê' * rating}
üìù –í—ñ–¥–≥—É–∫: {review_text}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

#–≤—ñ–¥–≥—É–∫ #–∑—ñ—Ä–∫–∏ #—Ç–µ–ª–µ–≥—Ä–∞–º"""
        
        try:
            await bot.send_message(REVIEWS_CHANNEL_ID, channel_message)
            logger.info(f"–û—Ç–∑—ã–≤ #{review_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {REVIEWS_CHANNEL_ID} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ: {purchase_info.strip()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª {REVIEWS_CHANNEL_ID}: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—É –≤ –∫–∞–Ω–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu()
            )
            await state.finish()
            return

        try:
            await message.answer(
                "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥–≥—É–∫—ñ–≤.",
                reply_markup=get_main_menu()
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}", exc_info=True)

        try:
            for admin_id in ADMIN_IDS:
                admin_message = f"üí¨ –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ #{review_id} –≤—ñ–¥ {message.from_user.full_name} ({rating}/5 –∑—ñ—Ä–æ–∫)\n{purchase_info.strip()}"
                await bot.send_message(admin_id, admin_message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º {ADMIN_IDS} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º {ADMIN_IDS}: {e}", exc_info=True)

        if order_id and order_id in orders:
            del orders[order_id]
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")

        logger.info(f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_review_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_menu()
        )
    
    finally:
        await state.finish()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@dp.message_handler(lambda message: message.text and message.text.lower() in [
    '–≤—ñ–¥–º—ñ–Ω–∞', '–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel', '‚ùå –≤—ñ–¥–º—ñ–Ω–∞'
], state="*")
async def cancel_any_state(message: types.Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state:
        data = await state.get_data()
        order_id = data.get('order_id')
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if order_id and order_id in orders:
            del orders[order_id]
            
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    else:
        await message.answer("üè† –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=get_main_menu())

    
@dp.message_handler(lambda message: message.content_type != 'photo', 
                   state=CardPaymentStates.waiting_for_payment_screenshot)
async def handle_wrong_content_type(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ (—Ñ–æ—Ç–æ), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")


# –î–û–ë–ê–í–ò–¢–¨ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–¥:
@dp.message_handler(content_types=['photo'], state=CardPaymentStates.waiting_for_payment_screenshot)
async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        
        if order_id not in orders:
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –∑–∞–∫–∞–∑
        orders[order_id]['payment_screenshot'] = message.photo[-1].file_id
        orders[order_id]['status'] = 'pending_admin'
        
        await message.answer(
            "‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.\n"
            "‚è≥ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–∑–∞–∑–≤–∏—á–∞–π –¥–æ 30 —Ö–≤–∏–ª–∏–Ω).",
            reply_markup=get_main_menu()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_card_order_to_admin(order_id, orders[order_id])
        
        await state.finish()
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.finish()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_ids.add(user_id)
    save_user(user_id)
    
    if not await subscription_required(message.from_user.id):
        return
    
    welcome_text = """üåü –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ @ZEMSTA_stars_bot!
‚ú® –û–±–∏—Ä–∞–π, –∫—É–ø—É–π —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∑—ñ—Ä–∫–∞–º–∏!

üî• –ï–∫–æ–Ω–æ–º—ñ—è –¥–æ 30%!
üíé –û–ø–ª–∞—Ç–∞ TON –∞–±–æ ‚Ç¥ ‚Äî —è–∫ –∑—Ä—É—á–Ω–æ.

üëá –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ —ñ –ø–æ—á–∏–Ω–∞–π –ª–µ–≥–∫–æ! üòä"""
    
    try:
        with open('welcome_image.jpg', 'rb') as photo:
            await message.answer_photo(photo, caption=welcome_text, reply_markup=get_main_menu())
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª welcome_image.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer(welcome_text, reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(welcome_text, reply_markup=get_main_menu())
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """üìã –Ø–∫ –∫—É–ø–∏—Ç–∏ –∑—ñ—Ä–∫–∏ –∞–±–æ Telegram Premium:

1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å "–ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏" –∞–±–æ "–ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium" —É –º–µ–Ω—é
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–∞–∫–µ—Ç
3Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ (TON –∏–ª–∏ –∫–∞—Ä—Ç–æ–π)
4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
5Ô∏è‚É£ –î–ª—è –æ–ø–ª–∞—Ç—ã TON: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ
   –î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username, –∑–∞—Ç–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
6Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑—ñ—Ä–æ–∫ –∏–ª–∏ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∏

‚ùì –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"."""    
    await message.answer(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

@dp.message_handler(commands=['sendall'])
async def send_all_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /sendall –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = message.text[9:].strip()
    
    if not text:
        await message.answer("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /sendall <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
        return
    
    success_count = 0
    fail_count = 0
    
    await message.answer(f"üì° –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è {len(user_ids)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await message.answer(f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {fail_count}")

@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(user_ids)}
üìã –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}
üïí –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üì∫ –ö–∞–Ω–∞–ª –≤—ñ–¥–≥—É–∫—ñ–≤: {REVIEWS_CHANNEL_ID}
üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'‚úÖ' if RESTART_ON_ERROR else '‚ùå'}"""
    
    await message.answer(stats_text)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(MAIN_CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if await check_subscription(user_id):
        await callback_query.message.edit_text(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!",
            reply_markup=None
        )
        await bot.send_message(user_id, "üåü–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
    else:
        await callback_query.answer("‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")

async def subscription_required(user_id: int) -> bool:
    if not await check_subscription(user_id):
        subscription_text = """‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª!

üì∫ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É" """
        
        await bot.send_message(
            user_id,
            subscription_text,
            reply_markup=get_subscription_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
        return False
    return True

@dp.message_handler(commands=['restart'])
async def restart_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    await safe_restart()

async def safe_restart():
    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(3)
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É...")
    except:
        pass
    
    os.execl(sys.executable, sys.executable, *sys.argv)

@dp.message_handler(Text(equals="üåü –ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏"))
async def stars_menu(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é –∑–≤–µ–∑–¥")
    if not await subscription_required(message.from_user.id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
        return
        
    await message.answer(
        "üåü –ü—Ä–∏–¥–±–∞—Ç–∏ –∑—ñ—Ä–∫–∏ –º–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫–∏–º–∏ —Ü—ñ–Ω–∞–º–∏:",
        reply_markup=get_stars_menu()
    )

@dp.message_handler(Text(equals="üíé –ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium"))
async def premium_menu(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    await message.answer(
        "üíé –ü—Ä–∏–¥–±–∞—Ç–∏ Telegram Premium –º–æ–∂–Ω–∞ –∑–∞ —Ç–∞–∫–∏–º–∏ —Ü—ñ–Ω–∞–º–∏:",
        reply_markup=get_premium_menu()
    )

@dp.message_handler(Text(equals="üì£ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏"))
async def reviews_channel(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì£ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url="https://t.me/starsZEMSTA"))
    await message.answer("üì£ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏")

ADMIN_IDS = [6186532466,6862952576]

@dp.message_handler(Text(equals="üÜò –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"))
async def support_contact(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup()
    random_admin_id = random.choice(ADMIN_IDS)
    keyboard.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ", url=f"tg://user?id={random_admin_id}"))
    
    await message.answer("üÜò –î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=keyboard)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –æ–±—Ä–∞–Ω–∏–π –∞–¥–º–∏–Ω {random_admin_id}")

@dp.message_handler(Text(equals="üì§ –†–æ–∑—Å–∏–ª–∫–∞"))
async def start_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
    await BroadcastStates.waiting_for_broadcast_text.set()

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@dp.callback_query_handler(lambda c: c.data.startswith("select_"))
async def handle_selection(callback_query: types.CallbackQuery, state: FSMContext):
    selection = callback_query.data.replace("select_", "")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–∞–∫–µ—Ç: {selection}")
    if selection not in STAR_PRICES:
        logger.error(f"–ü–∞–∫–µ—Ç {selection} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    order_data = STAR_PRICES[selection]
    
    order_id = f"{order_data['type']}_{callback_query.from_user.id}_{int(datetime.now().timestamp())}"
    username = f"@{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name
    orders[order_id] = {
        "user_id": callback_query.from_user.id,
        "user_name": username,
        "type": order_data["type"],
        "price": order_data["price"],
        "status": "pending",
        "created_at": datetime.now().isoformat()
    }
    
    if order_data["type"] == "stars":
        orders[order_id]["stars"] = order_data["stars"]
    else:
        orders[order_id]["months"] = order_data["months"]
    
    await state.update_data(order_id=order_id)
    
    payment_text = f"""üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

{'‚≠ê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫: ' + str(order_data['stars']) if order_data['type'] == 'stars' else 'üíé –¢–µ—Ä–º—ñ–Ω: ' + str(order_data['months']) + ' –º—ñ—Å—è—Ü—ñ–≤'}
üí∞ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {order_data['price']}‚Ç¥

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:
üíé –û–ø–ª–∞—Ç–∞ TON - —á–µ—Ä–µ–∑ TON Connect
üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"""
    
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    await callback_query.message.edit_text(payment_text, reply_markup=get_payment_method_keyboard(order_id))
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "cancel_order", state="*")
async def cancel_order_by_user(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id and order_id in orders:
        del orders[order_id]
        logger.info(f"–ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}")
    await state.finish()
    await callback_query.message.edit_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑")

@dp.message_handler(state=BroadcastStates.waiting_for_broadcast_text)
async def handle_broadcast_text(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.finish()
        return

    text = message.text.strip()
    
    if not text:
        await message.answer("üìù –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    success_count = 0
    fail_count = 0
    
    await message.answer(f"üì° –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è {len(user_ids)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await message.answer(f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {fail_count}")
    await state.finish()

async def handle_critical_error(exc_type, exc_value, exc_traceback):
    error_message = f"""üö® –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:

Type: {exc_type.__name__}
Message: {str(exc_value)}
Traceback: {traceback.format_exc()}

Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, error_message)
    except:
        pass
    
    logger.critical(error_message)
    
    if RESTART_ON_ERROR:
        await safe_restart()

@dp.message_handler(lambda message: not message.text.startswith('/'), state=None, content_types=['text'])
async def handle_other_messages(message: types.Message):
    if not await subscription_required(message.from_user.id):
        return
        
    await message.answer("‚ùì –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏:", reply_markup=get_main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def on_startup(dp):
    init_db()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫: {e}")

async def on_shutdown(dp):
    logger.info("üî¥ –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")

if __name__ == '__main__':
    print("üåü Telegram Bot –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –∑—ñ—Ä–æ–∫ —Ç–∞ Telegram Premium")
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üë§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_IDS}")
    print(f"üîó API Split: {SPLIT_API_URL}")
    print(f"üì∫ –ö–∞–Ω–∞–ª –≤—ñ–¥–≥—É–∫—ñ–≤: {REVIEWS_CHANNEL_ID}")
    print(f"üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'‚úÖ' if RESTART_ON_ERROR else '‚ùå'}")
    print(f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {CARD_NUMBER}")
    
    if RESTART_ON_ERROR:
        sys.excepthook = lambda exc_type, exc_value, exc_traceback: asyncio.run(
            handle_critical_error(exc_type, exc_value, exc_traceback)
        )
    
    try:
        executor.start_polling(
            dp, 
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        if RESTART_ON_ERROR:
            asyncio.run(safe_restart())
        else:
            raise
